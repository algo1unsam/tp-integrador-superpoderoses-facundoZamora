import superpoderoses.*
import Equipos.*
import peligros.*
import metaymagos.*
describe "Superpoderoses" {
	
	/* ACLARACIÓN 
	 * El test asume todos los objetos como instancias de clases. 
	 * Si el diseño de la solución utiliza objetos bien conocidos en algunos casos entonces 
	 * se debe remover la declaración de la variable y la línea en que se sugiere la instanciación.
	 */


		


		const altaVelocidad = new PoderVelocidad(rapidez =2)
		const superVelocidad = new PoderVelocidad(rapidez =3)
		const vueloRasante = new PoderVuelo (alturaMax =10, energiaDespegue =10)
		const vueloAlto = new PoderVuelo (alturaMax =300, energiaDespegue =200)
		const vueloRasanteAmplificado = new PoderAmplificado(Poderbase = vueloRasante, amplificador= 4)
		const superVelocidadAmplificada  = new PoderAmplificado(Poderbase = superVelocidad, amplificador= 3)
		
		
		const capitanaPatriaGrande = new Personaje ( nombre ="capitanaPatriaGrande", estrategia =3 ,  espiritu =5 , niveEstrategia=3)
		const plusvaliaCero = new Personaje ( nombre ="capitanaPatriaGrande", estrategia =2 ,  espiritu =4 , niveEstrategia=2)
		const usinaDeDerechos = new Personaje ( nombre ="capitanaPatriaGrande", estrategia =1 ,  espiritu =6 , niveEstrategia=1)
		
		
		const cooperativaJusticiera = new Equipo()
		
		/*
		const peligroSencillo = new Peligros (radiactivo = false , capasidad_de_batalla= 30)
		const peligroSencilloRadiactivo = new Peligros (radiactivo = true , capasidad_de_batalla= 30)
		const peligroModerado = new Peligros (radiactivo = true , capasidad_de_batalla= 50)
		const peligroAlto = new Peligros (radiactivo = true , capasidad_de_batalla= 400)
		*/
		const peligroSencillo = new Peligros (radiactivo = false , capasidad_de_batalla= 30, nivelComplejidad= 1 , cuantosSebanca= 1)
		const peligroSencilloRadiactivo = new Peligros (radiactivo = true , capasidad_de_batalla= 30, nivelComplejidad= 1, cuantosSebanca= 2)
		const peligroModerado = new Peligros (radiactivo = true , capasidad_de_batalla= 50, nivelComplejidad=2 , cuantosSebanca=1 )
		const peligroAlto = new Peligros (radiactivo = true , capasidad_de_batalla= 400, nivelComplejidad=3 , cuantosSebanca=2 )
		
		const fragmentadorMonopolios = new Metahumano (nombre ="El Fragmentador de monopolios", estrategia =1 ,  espiritu =6 ,niveEstrategia =1 )
		
		const educadorPublico = new Mago ( nombre ="Educador público", estrategia =1 ,  espiritu =6, poderAcumulado =12 ,niveEstrategia=1 )
	
	
	
	
	
	
	
	method initialize(){
		
		//aca pueden inicializar todo lo que quieran dentro de este describe "Superpoderoses", cada describe puede tener hasta 1 initilize
		
		// Punto 1
		capitanaPatriaGrande.agregar_poderes(superVelocidadAmplificada)
		capitanaPatriaGrande.agregar_poderes(vueloAlto)
		
		plusvaliaCero.agregar_poderes(altaVelocidad)
		plusvaliaCero.agregar_poderes(vueloRasanteAmplificado)
		
		usinaDeDerechos.agregar_poderes(vueloRasante)
		
		
		cooperativaJusticiera.agregar_integrantes (capitanaPatriaGrande)
		cooperativaJusticiera.agregar_integrantes (plusvaliaCero)
		cooperativaJusticiera.agregar_integrantes (usinaDeDerechos)
		
		fragmentadorMonopolios.agregar_poderes(vueloRasante)
		educadorPublico.agregar_poderes(vueloRasante)
		
	}
	
	///* ACLARACIÓN
	 //* Los tests están comentados para evitar errores y warnings, así poder ir incorporándolos 
	 //* a medida que se avanza con la solución del ejercicio
	 //*/
	test "punto 1.1 capacidad de batalla que aporta un poder Capitana Grende " {// TODO: Verificar que la capacidad de batalla que le aporta superVelocidadAmplificada a capitanaPatriaGrande es 576
		
		assert.equals(576,superVelocidadAmplificada.capasidad_de_batalla(capitanaPatriaGrande))
		}
	test "punto 1.2 capacidad de batalla que aporta un poder" {// TODO: Verificar que la capacidad de batalla que le aporta vueloAlto a capitanaPatriaGrande es 876
		//capitanaPatriaGrande.agregar_poderes(superVelocidadAmplificada)
		assert.equals(876,vueloAlto.capasidad_de_batalla(capitanaPatriaGrande))
		}
	
		test "punto 1.3 capacidad de batalla que aporta un poder" {// TODO: Verificar que la capacidad de batalla que le aporta altaVelocidad a plusvaliaCero es 72
		//capitanaPatriaGrande.agregar_poderes(superVelocidadAmplificada)
		assert.equals(72,altaVelocidad.capasidad_de_batalla(plusvaliaCero))
		}
		
			test "punto 1.4 capacidad de batalla que aporta un poder" {// TODO: Verificar que la capacidad de batalla que le aporta vueloRasanteAmplificado a plusvaliaCero es 144
		//capitanaPatriaGrande.agregar_poderes(superVelocidadAmplificada)
		assert.equals(144,vueloRasanteAmplificado.capasidad_de_batalla(plusvaliaCero))
		}
			test "punto 1.5 capacidad de batalla que aporta un poder" {// TODO: Verificar que la capacidad de batalla que le aporta vueloRasante a usinaDeDerechos es 49
		//capitanaPatriaGrande.agregar_poderes(superVelocidadAmplificada)
		assert.equals(49,vueloRasante.capasidad_de_batalla(usinaDeDerechos))
		}
		
	test "punto 1.6 capacidad de batalla de un personaje" {
		assert.equals(1452,capitanaPatriaGrande.capasidad_de_batalla())// TODO: Verificar que la capacidad de batalla de capitanaPatriaGrande es 1452
		
	}
	test "punto 1.7 capacidad de batalla de un personaje" {
		assert.equals(216,plusvaliaCero.capasidad_de_batalla())// TODO: Verificar que la capacidad de batalla de plusvaliaCero es 216
		}
	test "punto 1.8 capacidad de batalla de un personaje" {
		assert.equals(49,usinaDeDerechos.capasidad_de_batalla())// TODO: Verificar que la capacidad de batalla de usinaDeDerechos es 49
		}


	test "punto 2.1 Saber el miembro vulnerable de un equipo" {
		assert.equals(usinaDeDerechos,cooperativaJusticiera.peor_integrante ())// TODO: Verificar que miembro mas vulnerable de cooperativaJusticiera es usinaDeDerechos
	}
	
	 

	test "punto 2.2 Saber la calidad de un equipo" {
		assert.equals(572.33333,cooperativaJusticiera.calidad())// TODO: Verificar que la calidad de cooperativaJusticiera es 572.33333
	}



	test "punto 2.3 Saber los mejores poderes de un equipo" {
		assert.equals(#{vueloAlto,vueloRasante,vueloRasanteAmplificado},cooperativaJusticiera.mejor_poder ())// TODO: Verificar que los mejores poderes de cooperativaJusticiera son vueloAlto, vueloRasanteAmplificado y vueloRasante
	}
 	
	
	

	test "punto 3.1 personajes contra el peligro" {
		assert.that(peligroSencillo.puedeGanar (capitanaPatriaGrande))// TODO: Verificar que peligroSencillo puede ser afrontado por capitanaPatriaGrande
		
		assert.that(peligroSencillo.puedeGanar (plusvaliaCero)) // TODO: Verificar que peligroSencillo puede ser afrontado por plusvaliaCero
		assert.notThat(peligroSencillo.puedeGanar (usinaDeDerechos))// TODO: Verificar que peligroSencillo puede ser afrontado por usinaDeDerechos

		assert.that(peligroSencilloRadiactivo.puedeGanar (capitanaPatriaGrande))
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por capitanaPatriaGrande
		assert.that(peligroSencilloRadiactivo.puedeGanar (plusvaliaCero))
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por plusvaliaCero
		assert.notThat(peligroSencilloRadiactivo.puedeGanar (usinaDeDerechos))
		// TODO: Verificar que peligroSencilloRadiactivo NO puede ser afrontado por usinaDeDerechos

		
		// TODO: Verificar que peligroModerado puede ser afrontado por capitanaPatriaGrande
		// TODO: Verificar que peligroModerado puede ser afrontado por plusvaliaCero
		// TODO: Verificar que peligroModerado NO puede ser afrontado por usinaDeDerechos
		assert.that(peligroModerado.puedeGanar (capitanaPatriaGrande))
		
		assert.that(peligroModerado.puedeGanar (plusvaliaCero))
		
		assert.notThat(peligroModerado.puedeGanar (usinaDeDerechos))
		
		
		// TODO: Verificar que peligroAlto puede ser afrontado por capitanaPatriaGrande
		// TODO: Verificar que peligroAlto NO puede ser afrontado por plusvaliaCero
		// TODO: Verificar que peligroAlto NO puede ser afrontado por usinaDeDerechos
		
		assert.that(peligroAlto.puedeGanar (capitanaPatriaGrande))
		
		assert.notThat(peligroAlto.puedeGanar (plusvaliaCero))
		
		assert.notThat(peligroAlto.puedeGanar (usinaDeDerechos))
		
	}
  
	

	test "punto 3.2 Saber si un peligro es sensato " {
		// TODO: Verificar que peligroSencillo es sensato para cooperativaJusticiera
		// TODO: Verificar que peligroSencilloRadiactivo NO es sensato para cooperativaJusticiera
		// TODO: Verificar que peligroModerado NO es sensato para cooperativaJusticiera
		// TODO: Verificar que peligroAlto NO es sensato para cooperativaJusticiera
		assert.notThat(peligroSencillo.EquipoPuedeGanar (cooperativaJusticiera))
		assert.notThat(peligroSencilloRadiactivo.EquipoPuedeGanar (cooperativaJusticiera))
		assert.notThat(peligroModerado.EquipoPuedeGanar (cooperativaJusticiera))
		assert.notThat(peligroAlto.EquipoPuedeGanar (cooperativaJusticiera))
		
	}
 
 
	

	test "punto 4.1 Afrontar peligro individualmente: OK" {
		assert.that(peligroSencillo.seEnfrenta (usinaDeDerechos))// TODO: Hacer que usinaDeDerechos afronte a peligroSencillo 
		assert.equals(2, usinaDeDerechos.niveEstrategia() )// TODO: Verificar que la estrategia de usinaDeDerechos es 2
		
	}
 



	test "punto 4.1 Afrontar peligro individualmente: no OK por radioactividad" {
		assert.notThat(peligroSencilloRadiactivo.seEnfrenta (usinaDeDerechos))// TODO: Hacer que usinaDeDerechos afronte a peligroSencilloRadiactivo (NO SE PUEDE!)
		assert.equals(1, usinaDeDerechos.niveEstrategia() )// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}

	
	

	test "punto 4.1 Afrontar peligro individualmente: no OK por capacidad de batalla" {
		assert.notThat(peligroModerado.seEnfrenta (usinaDeDerechos)) // TODO: Hacer que usinaDeDerechos afronte a peligroModerado (NO SE PUEDE!)
		assert.equals(1, usinaDeDerechos.niveEstrategia() )// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}
 
 
	

	test "punto 4.2  Afrontar peligro (moderado) en equipo  " {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroModerado
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 5
		// TODO: Verificar que la estrategia de plusvaliaCero es 4
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.that(peligroModerado.equpoSeEnfrenta (cooperativaJusticiera))
		
		assert.equals(5, capitanaPatriaGrande.niveEstrategia() )
		assert.equals(4, plusvaliaCero.niveEstrategia() )
		assert.equals(1, usinaDeDerechos.niveEstrategia() )
		
	}



	test "punto 4.2  Afrontar peligro (alto) en equipo (no ok)" {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroAlto (NO SE PUEDE!)
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 3
		// TODO: Verificar que la estrategia de plusvaliaCero es 2
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.notThat(peligroAlto.equpoSeEnfrenta (cooperativaJusticiera))
		
		assert.equals(3, capitanaPatriaGrande.niveEstrategia() )
		assert.equals(2, plusvaliaCero.niveEstrategia() )
		assert.equals(1, usinaDeDerechos.niveEstrategia() )
	
	
	}



	test "punto 5.1  Metahumano " {
		assert.equals(98,fragmentadorMonopolios.capasidad_de_batalla())// TODO: Verificar que la capacidad de batalla de fragmentadorMonopolios es 98
		assert.that(peligroSencilloRadiactivo.puedeGanar (fragmentadorMonopolios))// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por fragmentadorMonopolios
		assert.that(peligroSencilloRadiactivo.seEnfrenta (fragmentadorMonopolios))// TODO: Hacer que fragmentadorMonopolios afronte a peligroSencilloRadiactivo
		assert.equals(2,fragmentadorMonopolios.niveEstrategia())// TODO: Verificar que la estrategia de fragmentadorMonopolios es 2
		assert.equals(7,fragmentadorMonopolios.espiritu())// TODO: Verificar que la espiritualidad de fragmentadorMonopolios es 7
		assert.notThat(peligroAlto.puedeGanar (fragmentadorMonopolios))// TODO: Verificar que peligroAlto NO puede ser afrontado por fragmentadorMonopolios
		assert.notThat(peligroAlto.seEnfrenta (fragmentadorMonopolios))// TODO: Hacer que fragmentadorMonopolios afronte a peligroAlto (NO SE PUEDE!)
	}



	test "punto 5.2  Mago " {
		assert.equals(110,educadorPublico.capasidad_de_batalla())	// TODO: Verificar que la capacidad de batalla de educadorPublico es 110
		assert.notThat(peligroAlto.puedeGanar (educadorPublico))// TODO: Verificar que peligroAlto NO puede ser afrontado por educadorPublico
		assert.notThat(peligroAlto.seEnfrenta (educadorPublico))// TODO: Hacer que educadorPublico afronte a peligroAlto (NO SE PUEDE!)
	
		assert.that(peligroSencilloRadiactivo.puedeGanar (educadorPublico))// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por educadorPublico
		assert.that(peligroSencilloRadiactivo.seEnfrenta (educadorPublico))// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		assert.equals(2,educadorPublico.niveEstrategia())// TODO: Verificar que la estrategia de educadorPublico es 2
		assert.equals(7,educadorPublico.espiritu())// TODO: Verificar que la espiritualidad de educadorPublico es 7
		assert.equals(7,educadorPublico.poderAcumulado())// TODO: Verificar que el poder acumulado de educadorPublico es 7
		
		
	
	}

}

